import { API_ERRORS, STATUS_CODES, TAGS } from 'data';
import { generateCustomerData } from './generateCustomer.data';
import _, { toNumber } from 'lodash';

export const udateCustomerPositiveTestData = [
  {
    testName: 'Should update customer using all correct fields and valid token',
    tag: ['@1_C_UP_API', TAGS.API, TAGS.SMOKE, TAGS.REGRESSION],
    data: generateCustomerData(),
  },
  {
    testName: 'Should update customer using only required fileds (withot Notes)',
    tag: ['@2_C_UP_API', TAGS.API, TAGS.REGRESSION],
    data: _.omit(generateCustomerData(), ['notes']),
  },
  {
    testName: 'Should update customer using minimum length values for all fields',
    tag: ['@3', TAGS.API],
    data: generateCustomerData({
      name: 'a',
      city: 'b',
      street: 'z',
      house: 1,
      flat: 5,
      notes: 'qq',
      phone: '+1234567890',
    }),
  },
  {
    testName: 'Should update customer using maximum length values for all fields',
    tag: ['@3', TAGS.API],
    data: generateCustomerData({
      name: 'ab'.repeat(20),
      city: 'hi'.repeat(10),
      street: 'xo'.repeat(10),
      house: toNumber('9'.repeat(3)),
      flat: +'9'.repeat(4),
      phone: '+' + '1'.repeat(19),
      notes: 'q'.repeat(250),
    }),
  },
];

export const udateCustomerNegativeTestData = [
  {
    testName: 'Should not update customer when required field Email is missing',
    tag: ['@8_C_UP_API', TAGS.API],
    data: generateCustomerData({ email: '' }),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when Email format is invalid',
    tag: ['@9_C_CR_API', TAGS.API],
    data: generateCustomerData({ email: 'invalid email' }),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when required field Name is missing',
    tag: ['@11_C_CR_API', TAGS.API],
    data: _.omit(generateCustomerData(), ['name']),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when Name contains numbers or special characters',
    tag: ['@12_C_CR_API', TAGS.API],
    data: generateCustomerData({ name: 'qzzz$123' }),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when Name has more than one space between words',
    tag: ['@13_C_CR_API', TAGS.API],
    data: generateCustomerData({ name: 'name   with   spaces' }),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when Name length exceeds 40 characters',
    tag: ['@14_C_CR_API', TAGS.API],
    data: generateCustomerData({ name: 'w'.repeat(41) }),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when required field Country is missing',
    tag: ['@15_C_CR_API', TAGS.API],
    data: _.omit(generateCustomerData(), ['country']),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when required field City is missing',
    tag: ['@16_C_CR_API', TAGS.API],
    data: _.omit(generateCustomerData(), ['city']),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when City contains numbers or special characters',
    tag: ['@17_C_CR_API', TAGS.API],
    data: generateCustomerData({ city: 'testCity12314' }),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when City length exceeds 20 characters',
    tag: ['@18_C_CR_API', TAGS.API],
    data: generateCustomerData({ city: 'c'.repeat(21) }),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when required field Street is missing',
    tag: ['@19_C_CR_API', TAGS.API],
    data: _.omit(generateCustomerData(), ['street']),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when Street contains invalid characters',
    tag: ['@20_C_CR_API', TAGS.API],
    data: generateCustomerData({ street: 'stree////$$5345' }),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when Street length exceeds 40 characters',
    tag: ['@21_C_CR_API', TAGS.API],
    data: generateCustomerData({ street: 'o'.repeat(41) }),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when required field House is missing',
    tag: ['@22_C_CR_API', TAGS.API],
    data: _.omit(generateCustomerData(), ['house']),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when House number is out of range (0 or >999)',
    tag: ['@23_C_CR_API', TAGS.API],
    data: generateCustomerData({ house: +'9'.repeat(4) }),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when House number is not an integer',
    tag: ['@24_C_CR_API', TAGS.API],
    data: generateCustomerData({ house: 3.123 }),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when required field Flat is missing',
    tag: ['@25_C_CR_API', TAGS.API],
    data: _.omit(generateCustomerData(), ['flat']),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when Flat number is out of range (0 or >9999)',
    tag: ['@26_C_CR_API', TAGS.API],
    data: generateCustomerData({ house: +'7'.repeat(5) }),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when Flat number is not an integer',
    tag: ['@27_C_CR_API', TAGS.API],
    data: generateCustomerData({ flat: 9.6666 }),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when required field Phone is missing',
    tag: ['@28_C_CR_API', TAGS.API],
    data: _.omit(generateCustomerData(), ['phone']),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when Phone does not start with "+"',
    tag: ['@29_C_CR_API', TAGS.API],
    data: generateCustomerData({ phone: '12345678901' }),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when Phone is shorter than 10 characters',
    tag: ['@30_C_CR_API', TAGS.API],
    data: generateCustomerData({ phone: '+' + '6'.repeat(9) }),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when Phone is longer than 20 characters',
    tag: ['@31_C_CR_API', TAGS.API],
    data: generateCustomerData({ phone: '+' + '9'.repeat(21) }),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when Phone contains letters or special characters',
    tag: ['@32_C_CR_API', TAGS.API],
    data: generateCustomerData({ phone: '+123qew4444**' }),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not update customer when Notes contain forbidden characters "<" or ">"',
    tag: ['@33_C_CR_API', TAGS.API],
    data: generateCustomerData({ notes: 'test<< text>' }),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
  {
    testName: 'Should not create customer when Notes length exceeds 250 characters',
    tag: ['@34_C_CR_API', TAGS.API],
    data: generateCustomerData({ notes: 'w'.repeat(251) }),
    error: API_ERRORS.CUSTOMER_BAD_REQUEST,
    statusCode: STATUS_CODES.BAD_REQUEST,
  },
];
